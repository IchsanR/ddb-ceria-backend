// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	account "golang/module/account"

	mock "github.com/stretchr/testify/mock"
)

// UseCaseInterface is an autogenerated mock type for the UseCaseInterface type
type UseCaseInterface struct {
	mock.Mock
}

type UseCaseInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *UseCaseInterface) EXPECT() *UseCaseInterface_Expecter {
	return &UseCaseInterface_Expecter{mock: &_m.Mock}
}

// CreateAccount provides a mock function with given fields: req
func (_m *UseCaseInterface) CreateAccount(req *account.Account) (account.Account, error) {
	ret := _m.Called(req)

	var r0 account.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(*account.Account) (account.Account, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(*account.Account) account.Account); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Get(0).(account.Account)
	}

	if rf, ok := ret.Get(1).(func(*account.Account) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UseCaseInterface_CreateAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAccount'
type UseCaseInterface_CreateAccount_Call struct {
	*mock.Call
}

// CreateAccount is a helper method to define mock.On call
//   - req *account.Account
func (_e *UseCaseInterface_Expecter) CreateAccount(req interface{}) *UseCaseInterface_CreateAccount_Call {
	return &UseCaseInterface_CreateAccount_Call{Call: _e.mock.On("CreateAccount", req)}
}

func (_c *UseCaseInterface_CreateAccount_Call) Run(run func(req *account.Account)) *UseCaseInterface_CreateAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*account.Account))
	})
	return _c
}

func (_c *UseCaseInterface_CreateAccount_Call) Return(_a0 account.Account, _a1 error) *UseCaseInterface_CreateAccount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UseCaseInterface_CreateAccount_Call) RunAndReturn(run func(*account.Account) (account.Account, error)) *UseCaseInterface_CreateAccount_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteDataUser provides a mock function with given fields: id
func (_m *UseCaseInterface) DeleteDataUser(id string) (account.Account, error) {
	ret := _m.Called(id)

	var r0 account.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (account.Account, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) account.Account); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(account.Account)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UseCaseInterface_DeleteDataUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteDataUser'
type UseCaseInterface_DeleteDataUser_Call struct {
	*mock.Call
}

// DeleteDataUser is a helper method to define mock.On call
//   - id string
func (_e *UseCaseInterface_Expecter) DeleteDataUser(id interface{}) *UseCaseInterface_DeleteDataUser_Call {
	return &UseCaseInterface_DeleteDataUser_Call{Call: _e.mock.On("DeleteDataUser", id)}
}

func (_c *UseCaseInterface_DeleteDataUser_Call) Run(run func(id string)) *UseCaseInterface_DeleteDataUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *UseCaseInterface_DeleteDataUser_Call) Return(_a0 account.Account, _a1 error) *UseCaseInterface_DeleteDataUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UseCaseInterface_DeleteDataUser_Call) RunAndReturn(run func(string) (account.Account, error)) *UseCaseInterface_DeleteDataUser_Call {
	_c.Call.Return(run)
	return _c
}

// EditDataUser provides a mock function with given fields: id, req
func (_m *UseCaseInterface) EditDataUser(id string, req *account.Account) (account.Account, error) {
	ret := _m.Called(id, req)

	var r0 account.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(string, *account.Account) (account.Account, error)); ok {
		return rf(id, req)
	}
	if rf, ok := ret.Get(0).(func(string, *account.Account) account.Account); ok {
		r0 = rf(id, req)
	} else {
		r0 = ret.Get(0).(account.Account)
	}

	if rf, ok := ret.Get(1).(func(string, *account.Account) error); ok {
		r1 = rf(id, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UseCaseInterface_EditDataUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EditDataUser'
type UseCaseInterface_EditDataUser_Call struct {
	*mock.Call
}

// EditDataUser is a helper method to define mock.On call
//   - id string
//   - req *account.Account
func (_e *UseCaseInterface_Expecter) EditDataUser(id interface{}, req interface{}) *UseCaseInterface_EditDataUser_Call {
	return &UseCaseInterface_EditDataUser_Call{Call: _e.mock.On("EditDataUser", id, req)}
}

func (_c *UseCaseInterface_EditDataUser_Call) Run(run func(id string, req *account.Account)) *UseCaseInterface_EditDataUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(*account.Account))
	})
	return _c
}

func (_c *UseCaseInterface_EditDataUser_Call) Return(_a0 account.Account, _a1 error) *UseCaseInterface_EditDataUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UseCaseInterface_EditDataUser_Call) RunAndReturn(run func(string, *account.Account) (account.Account, error)) *UseCaseInterface_EditDataUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetDataUser provides a mock function with given fields:
func (_m *UseCaseInterface) GetDataUser() ([]account.Account, error) {
	ret := _m.Called()

	var r0 []account.Account
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]account.Account, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []account.Account); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]account.Account)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UseCaseInterface_GetDataUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDataUser'
type UseCaseInterface_GetDataUser_Call struct {
	*mock.Call
}

// GetDataUser is a helper method to define mock.On call
func (_e *UseCaseInterface_Expecter) GetDataUser() *UseCaseInterface_GetDataUser_Call {
	return &UseCaseInterface_GetDataUser_Call{Call: _e.mock.On("GetDataUser")}
}

func (_c *UseCaseInterface_GetDataUser_Call) Run(run func()) *UseCaseInterface_GetDataUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *UseCaseInterface_GetDataUser_Call) Return(_a0 []account.Account, _a1 error) *UseCaseInterface_GetDataUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UseCaseInterface_GetDataUser_Call) RunAndReturn(run func() ([]account.Account, error)) *UseCaseInterface_GetDataUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetDataUserById provides a mock function with given fields: id
func (_m *UseCaseInterface) GetDataUserById(id string) (account.Account, error) {
	ret := _m.Called(id)

	var r0 account.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (account.Account, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) account.Account); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(account.Account)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UseCaseInterface_GetDataUserById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDataUserById'
type UseCaseInterface_GetDataUserById_Call struct {
	*mock.Call
}

// GetDataUserById is a helper method to define mock.On call
//   - id string
func (_e *UseCaseInterface_Expecter) GetDataUserById(id interface{}) *UseCaseInterface_GetDataUserById_Call {
	return &UseCaseInterface_GetDataUserById_Call{Call: _e.mock.On("GetDataUserById", id)}
}

func (_c *UseCaseInterface_GetDataUserById_Call) Run(run func(id string)) *UseCaseInterface_GetDataUserById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *UseCaseInterface_GetDataUserById_Call) Return(_a0 account.Account, _a1 error) *UseCaseInterface_GetDataUserById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UseCaseInterface_GetDataUserById_Call) RunAndReturn(run func(string) (account.Account, error)) *UseCaseInterface_GetDataUserById_Call {
	_c.Call.Return(run)
	return _c
}

// Login provides a mock function with given fields: req
func (_m *UseCaseInterface) Login(req *account.Account) (string, account.Account, error) {
	ret := _m.Called(req)

	var r0 string
	var r1 account.Account
	var r2 error
	if rf, ok := ret.Get(0).(func(*account.Account) (string, account.Account, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(*account.Account) string); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*account.Account) account.Account); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Get(1).(account.Account)
	}

	if rf, ok := ret.Get(2).(func(*account.Account) error); ok {
		r2 = rf(req)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UseCaseInterface_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type UseCaseInterface_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - req *account.Account
func (_e *UseCaseInterface_Expecter) Login(req interface{}) *UseCaseInterface_Login_Call {
	return &UseCaseInterface_Login_Call{Call: _e.mock.On("Login", req)}
}

func (_c *UseCaseInterface_Login_Call) Run(run func(req *account.Account)) *UseCaseInterface_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*account.Account))
	})
	return _c
}

func (_c *UseCaseInterface_Login_Call) Return(_a0 string, _a1 account.Account, _a2 error) *UseCaseInterface_Login_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *UseCaseInterface_Login_Call) RunAndReturn(run func(*account.Account) (string, account.Account, error)) *UseCaseInterface_Login_Call {
	_c.Call.Return(run)
	return _c
}

// NewUseCaseInterface creates a new instance of UseCaseInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUseCaseInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *UseCaseInterface {
	mock := &UseCaseInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
